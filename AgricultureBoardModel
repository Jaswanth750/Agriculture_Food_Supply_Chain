from Constants import connString
import pyodbc
import datetime
import uuid
import time
import Constants    

class AgricultureBoardModel:
    def __init__(self,  ,agricultureBoardName = '',contactNbr = '',emailID = '',address = '',city = '',county = '',postcode = '',country = '',emailModel = None):
        self.agricultureBoardID = agricultureBoardID
        self.agricultureBoardName = agricultureBoardName
        self.contactNbr = contactNbr
        self.emailID = emailID
        self.address = address
        self.city = city
        self.county = county
        self.postcode = postcode
        self.country = country
        self.emailModel = emailModel
       
        

    @staticmethod
    def get_all():
        conn = pyodbc.connect(connString, autocommit=True)
        cursor = conn.cursor()
        sqlcmd1 = "SELECT * FROM AgricultureBoard ORDER BY agricultureBoardName"
        cursor.execute(sqlcmd1)
        records = []
        for dbrow in cursor.fetchall():
            row = AgricultureBoardModel(dbrow[0],dbrow[1],dbrow[2],dbrow[3],dbrow[4],dbrow[5],dbrow[6],dbrow[7],dbrow[8])
            records.append(row)
        cursor.close()
        conn.close()
        return records

    @staticmethod
    def get_name_id():
        conn = pyodbc.connect(connString, autocommit=True)
        cursor = conn.cursor()
        sqlcmd1 = "SELECT agricultureBoardID, agricultureBoardName FROM AgricultureBoard  ORDER BY agricultureBoardName"
        cursor.execute(sqlcmd1)
        records = []
        for dbrow in cursor.fetchall():
            row = AgricultureBoardModel(dbrow[0],dbrow[1])
            records.append(row)
        cursor.close()
        conn.close()
        return records
        
    @staticmethod
    def get_by_id(unique_id):
        conn = pyodbc.connect(connString, autocommit=True)
        cursor = conn.cursor()
        sqlcmd1 = "SELECT * FROM AgricultureBoard WHERE agricultureBoardID = ?"
        cursor.execute(sqlcmd1, unique_id)
        record = None
        for dbrow in cursor.fetchall():
            record = AgricultureBoardModel(dbrow[0],dbrow[1],dbrow[2],dbrow[3],dbrow[4],dbrow[5],dbrow[6],dbrow[7],dbrow[8])
        cursor.close()
        conn.close()
        return record
    
    @staticmethod
    def insert(obj):
        obj.agricultureBoardID = str(uuid.uuid4())
        conn = pyodbc.connect(connString, autocommit=True)
        cursor = conn.cursor()
        sqlcmd1 = "INSERT INTO AgricultureBoard (agricultureBoardID,agricultureBoardName,contactNbr,emailID,address,city,county,postcode,country) VALUES(?,?,?,?,?,?,?,?,?)"
        cursor.execute(sqlcmd1, (obj.agricultureBoardID,obj.agricultureBoardName,obj.contactNbr,obj.emailID,obj.address,obj.city,obj.county,obj.postcode,obj.country))
        cursor.close()
        conn.close()
        
    
    @staticmethod
    def update(obj):
        conn = pyodbc.connect(connString, autocommit=True)
        cursor = conn.cursor()
        sqlcmd1 = "UPDATE AgricultureBoard SET agricultureBoardName = ?,contactNbr = ?,emailID = ?,address = ?,city = ?,county = ?,postcode = ?,country = ? WHERE agricultureBoardID = ?"
        cursor.execute(sqlcmd1,  (obj.agricultureBoardName,obj.contactNbr,obj.emailID,obj.address,obj.city,obj.county,obj.postcode,obj.country,obj.agricultureBoardID))
        cursor.close()
        conn.close()
    
    @staticmethod
    def delete(unique_id):
        conn = pyodbc.connect(connString, autocommit=True)
        cursor = conn.cursor()
        sqlcmd1 = "DELETE FROM AgricultureBoard WHERE agricultureBoardID = ?"
        cursor.execute(sqlcmd1, (unique_id))
        cursor.close()
        conn.close()

